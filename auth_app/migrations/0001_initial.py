# Generated by Django 4.1.5 on 2023-06-03 22:35

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Sysadmin',
            fields=[
                ('nickname', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True)),
                ('password', models.CharField(max_length=15, unique=True)),
                ('chat_id', models.CharField(max_length=10, unique=True)),
                ('token_bot', models.CharField(max_length=50, unique=True)),
                ('token_double_auth', models.CharField(max_length=24, unique=True)),
                ('intentos', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('timestamp_ultimo_intento', models.DateTimeField()),
                ('timestamp_token_double_auth', models.DateTimeField()),
                ('ipv4_address', models.GenericIPAddressField(protocol='IPv4')),
                ('autorize_account', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Servidor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ipv4_address', models.GenericIPAddressField(protocol='IPv4', unique=True)),
                ('password', models.CharField(max_length=15, unique=True)),
                ('status', models.IntegerField(choices=[(0, 'Indeterminado'), (1, 'Activo'), (2, 'Apagado')], default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(2)])),
                ('sysadmin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth_app.sysadmin')),
            ],
        ),
        migrations.CreateModel(
            name='AdmonGlobal',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=50, primary_key=True, serialize=False, unique=True)),
                ('password', models.CharField(max_length=15, unique=True)),
                ('chat_id', models.CharField(max_length=10, unique=True)),
                ('token_bot', models.CharField(max_length=50, unique=True)),
                ('token_double_auth', models.CharField(max_length=24, unique=True)),
                ('intentos', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(4)])),
                ('timestamp_ultimo_intento', models.DateTimeField()),
                ('timestamp_token_double_auth', models.DateTimeField()),
                ('ipv4_address', models.GenericIPAddressField(protocol='IPv4')),
                ('is_active', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
